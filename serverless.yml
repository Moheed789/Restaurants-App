service: workshop-${self:custom.name}

frameworkVersion: '3'

package:
  individually: true

# Custom Variables
custom:
  logLevel:
    prod: ERROR
    default: INFO
  name: moheed
  export-env:
    overwrite: true
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env.cfnoutputs
  serverless-iam-roles-per-function:
    defaultInherit: true
  esbuild:
    minify: true
    external:
      - '@aws-sdk'
  lumigo:
    token: t_752d49a874854db9982b3
    nodePackageManager: npm

# Provider
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  profile: rafae
  region: us-east-1
  endpointType: regional

  # IAM Role Permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:scan
          Resource: !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action: execute-api:Invoke
          Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants
        - Effect: Allow
          Action: ssm:GetParameters*
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secretString
        - Effect: Allow
          Action: kms:Decrypt
          Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}
        - Effect: Allow
          Action: events:PutEvents
          Resource: !GetAtt EventBus.Arn
        - Effect: Allow
          Action: sns:Publish
          Resource: !Ref RestaurantNotificationTopic
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !GetAtt IdempotencyTable.Arn
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: "*"

  # Environment Variables 
  environment:
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
    serviceName: ${self:service}
    stage: ${sls:stage}
    middy_cache_enabled: true
    middy_cache_expiry_milliseconds: 60000
    ssmStage: ${param:ssmStage, sls:stage}
    LOG_LEVEL: ${self:custom.logLevel.${sls:stage}, self:custom.logLevel.default}
    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
    POWERTOOLS_LOGGER_LOG_EVENT: true

  # Tracing
  tracing:
    apiGateway: true
    lambda: true

# Functions
functions:
  
  # Restaurants Get Index
  functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      restaurants_table: !Ref RestaurantsTable
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/orders
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants

  # Get All Restaurants
  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config

  # Search Restaurants
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:300205417350:userpool/us-east-1_1nEztcqQ4
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secretString
      - Effect: Allow
        Action: kms:Decrypt
        Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}

  # Place Order
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn

  # Restaurant Notify
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
      idempotency_table: !Ref IdempotencyTable
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt IdempotencyTable.Arn
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: !GetAtt OnFailureQueue.Arn
    destinations:
      onFailure:
        type: sqs
        arn: !GetAtt OnFailureQueue.Arn

# Resources
resources:

  # Conditions
  Conditions:
    IsE2eTest:
      Fn::Equals:
        - ${sls:stage}
        - dev

  # Resources
  Resources:

    # Create Restaurant Table
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    # Create Idempotency Table
    IdempotencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expiration

    # Create Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"

    # Create Web Cognito User Pool use Client
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    # Create Server Cognito User Pool Client
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    # Create System Manager
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${sls:stage}/serviceUrl
        Value:
          Fn::Join:
            - ""
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${aws:region}.amazonaws.com/${sls:stage}

    # Create Event Bus
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${sls:stage}_${self:custom.name}

    # Create Simple Notification Service
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic

    # Create Simple Queue Service
    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1

    # Create Simple Queue Service
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn

    # Create Simple Notification Service
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic

    # Create Event Bridge
    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ["big-mouth"]
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: "$.source"
                detailType: "$.detail-type"
                detail: "$.detail"
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }

    # Create Simple Queue Service
    OnFailureQueue:
      Type: AWS::SQS::Queue

    # Create Simple Notification Service
    AlarmTopic:
      Type: AWS::SNS::Topic

    # Create Simple Notification Service
    AlarmTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: moheedsiddiqui74@gmail.com
        Protocol: email
        TopicArn: !Ref AlarmTopic

    # Create CloudWatch Alarm on OnFailureQueueAlarm
    OnFailureQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] [NotifyRestaurant function] Failed events detected in OnFailure destination'
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OnFailureQueue.QueueName
        AlarmActions:
          - !Ref AlarmTopic

    # Create CloudWatch Alarm on DestinationDeliveryFailuresAlarm
    DestinationDeliveryFailuresAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] [NotifyRestaurant function] Failed to deliver failed events to OnFailure destination'
        MetricName: DestinationDeliveryFailures
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: FunctionName
            Value: !Ref NotifyDashrestaurantLambdaFunction
        AlarmActions:
          - !Ref AlarmTopic

  # Outputs
  Outputs:

    # Restaurants Table Name Output
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    # Congnito User Pool Id Output
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    # Cognito User Pool Arn Output
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    # Cognito User Pool Web Client Id Output
    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    # Cognito User Pool Server Client Id Output
    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    # Event Bus Name Output
    EventBusName:
      Value: !Ref EventBus

    # Restaurant Notification Topic Name Output
    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    # Restaurant Notification Topic Arn Output
    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    # End-to-End Test Queue Url Output
    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue

# PlugIns
plugins:
  - serverless-export-env
  - serverless-export-outputs
  - serverless-plugin-extrinsic-functions
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-lumigo